{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "76de6945",
   "metadata": {},
   "source": [
    "What we learned in lecture:\n",
    "\n",
    "arr*2 or matrix*2 multiplies array/matrix values by 2\n",
    "\n",
    "arr.shape or matrix.shape gives the (Rows x Columns) of the array/matrix. For 2x3 matrix, matrix.shape gives (2,3). For a 6-value array, array.shape gives (6,) because arr is a list, not a vector.\n",
    "\n",
    "arr.size or matrix.size gives the total number of values in the array/matrix.\n",
    "\n",
    "arr.mean() takes the mean of the values in the array\n",
    "arr.sum() sums the array values\n",
    "arr.max() gives the maximum value in the array\n",
    "\n",
    "matrix.sum(axis=0) sums along the columns\n",
    "matrix.sum(axis=1) sums along the rows\n",
    "\n",
    "matri.mean and matrix.max do the same things for axis = 0 or 1, along the columns or rows respectively, except taking the mean or maximum rather than sum.\n",
    "\n",
    "np.zeros(A,B,C,D) is used to write \"3-Dimensional matrices\" or tensors\n",
    "\n",
    "\n",
    "np.arange(A,B,C) gives an array of values from A to B-C spaced apart by C\n",
    "\n",
    "np.linspace(A,B,C) gives an array of C equally spaced apart values from A to the closest value to B allowed by the paramater C"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
